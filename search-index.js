var searchIndex = {};
searchIndex["codegen"] = {"doc":"Provides a builder API for generating Rust code.","items":[[3,"Scope","codegen","Defines a scope.",null,null],[3,"Module","","Defines a module.",null,null],[3,"Enum","","Defines an enumeration.",null,null],[3,"Struct","","Defines a struct.",null,null],[3,"Trait","","Define a trait.",null,null],[3,"Type","","Defines a type.",null,null],[3,"Variant","","Defines an enum variant.",null,null],[3,"AssociatedType","","Defines an associated type.",null,null],[3,"Impl","","Defines an impl block.",null,null],[3,"Import","","Defines an import (`use` statement).",null,null],[3,"Function","","Defines a function.",null,null],[3,"Block","","Defines a code block. This is used to define a function body.",null,null],[3,"Formatter","","Configures how a scope is formatted.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"module"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"associatedtype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"import"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new scope",0,{"inputs":[],"output":{"name":"self"}}],[11,"import","","Import a type into the scope.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"import"}}],[11,"new_module","","Push a new module definition, returning a mutable reference to it.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"module"}}],[11,"get_module_mut","","Returns a mutable reference to a module if it is exists in this scope.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["module"],"name":"option"}}],[11,"get_module","","Returns a mutable reference to a module if it is exists in this scope.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["module"],"name":"option"}}],[11,"get_or_new_module","","Returns a mutable reference to a module, creating it if it does not exist.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"module"}}],[11,"push_module","","Push a module definition.",0,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"self"}}],[11,"new_struct","","Push a new struct definition, returning a mutable reference to it.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"struct"}}],[11,"push_struct","","Push a struct definition",0,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"self"}}],[11,"new_trait","","Push a new trait definition, returning a mutable reference to it.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"trait"}}],[11,"push_trait","","Push a trait definition",0,{"inputs":[{"name":"self"},{"name":"trait"}],"output":{"name":"self"}}],[11,"new_enum","","Push a new struct definition, returning a mutable reference to it.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enum"}}],[11,"push_enum","","Push a structure definition",0,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"self"}}],[11,"new_impl","","Push a new `impl` block, returning a mutable reference to it.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"impl"}}],[11,"push_impl","","Push an `impl` block.",0,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"name":"self"}}],[11,"raw","","Push a raw string to the scope.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"to_string","","Return a string representation of the scope.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","Formats the scope using the given formatter.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new, blank module",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"scope","","Returns a mutable reference to the module's scope.",1,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"vis","","Set the module visibility.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"import","","Import a type into the module's scope.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_module","","Push a new module definition, returning a mutable reference to it.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"module"}}],[11,"get_module","","Returns a reference to a module if it is exists in this scope.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["module"],"name":"option"}}],[11,"get_module_mut","","Returns a mutable reference to a module if it is exists in this scope.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["module"],"name":"option"}}],[11,"get_or_new_module","","Returns a mutable reference to a module, creating it if it does not exist.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"module"}}],[11,"push_module","","Push a module definition.",1,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"self"}}],[11,"new_struct","","Push a new struct definition, returning a mutable reference to it.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"struct"}}],[11,"push_struct","","Push a structure definition",1,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"self"}}],[11,"new_enum","","Push a new enum definition, returning a mutable reference to it.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enum"}}],[11,"push_enum","","Push an enum definition",1,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"self"}}],[11,"new_impl","","Push a new `impl` block, returning a mutable reference to it.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"impl"}}],[11,"push_impl","","Push an `impl` block.",1,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"name":"self"}}],[11,"fmt","","Formats the module using the given formatter.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a structure definition with the provided name",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"ty","","Returns a reference to the type",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"vis","","Set the structure visibility.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"generic","","Add a generic to the struct.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"bound","","Add a `where` bound to the struct.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"doc","","Set the structure documentation.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"derive","","Add a new type that the struct should derive.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"field","","Add a named field to the struct.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"tuple_field","","Add a tuple field to the struct.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","Formats the struct using the given formatter.",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a trait definition with the provided name",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"ty","","Returns a reference to the type",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"vis","","Set the trait visibility.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"generic","","Add a generic to the trait",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"bound","","Add a `where` bound to the trait.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"parent","","Add a parent trait.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"doc","","Set the trait documentation.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"associated_type","","Add an associated type. Returns a mutable reference to the new associated type for futher configuration.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"associatedtype"}}],[11,"new_fn","","Push a new function definition, returning a mutable reference to it.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"function"}}],[11,"push_fn","","Push a function definition.",4,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"self"}}],[11,"fmt","","Formats the scope using the given formatter.",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a enum definition with the provided name.",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"ty","","Returns a reference to the type.",2,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"vis","","Set the enum visibility.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"generic","","Add a generic to the enum.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"bound","","Add a `where` bound to the enum.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"doc","","Set the enum documentation.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"derive","","Add a new type that the struct should derive.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_variant","","Push a variant to the enum, returning a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"variant"}}],[11,"push_variant","","Push a variant to the enum.",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"self"}}],[11,"fmt","","Formats the enum using the given formatter.",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new enum variant with the given name.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"named","","Add a named field to the variant.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"tuple","","Add a tuple field to the variant.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","Formats the variant using the given formatter.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new type with the given name.",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"generic","","Add a generic to the type.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"path","","Rewrite the `Type` with the provided path",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"type"}}],[11,"fmt","","Formats the struct using the given formatter.",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"bound","","Add a bound to the associated type.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Return a new impl definition",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"generic","","Add a generic to the impl block.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"target_generic","","Add a generic to the target type.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"impl_trait","","Set the trait that the impl block is implementing.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"associate_type","","Set an associated type.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"bound","","Add a `where` bound to the impl block.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"new_fn","","Push a new function definition, returning a mutable reference to it.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"function"}}],[11,"push_fn","","Push a function definition.",8,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"self"}}],[11,"fmt","","Formats the impl block using the given formatter.",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new import.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"vis","","Set the import visibility.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"new","","Return a new function definition.",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"doc","","Set the function documentation.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"vis","","Set the function visibility.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"generic","","Add a generic to the function.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"arg_self","","Add `self` as a function argument.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"arg_ref_self","","Add `&self` as a function argument.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"arg_mut_self","","Add `&mut self` as a function argument.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"arg","","Add a function argument.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"ret","","Set the function return type.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"bound","","Add a `where` bound to the function.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"line","","Push a line to the function implementation.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"push_block","","Push a block to the function implementation",10,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"self"}}],[11,"fmt","","Formats the function using the given formatter.",10,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty code block.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"line","","Push a line to the code block.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"push_block","","Push a nested block to this block.",11,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"self"}}],[11,"after","","Add a snippet after the block.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","Formats the block using the given formatter.",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new formatter that writes to the given string.",12,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"write_str","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Scope"],[3,"Module"],[3,"Enum"],[3,"Struct"],[3,"Trait"],[3,"Type"],[3,"Variant"],[3,"AssociatedType"],[3,"Impl"],[3,"Import"],[3,"Function"],[3,"Block"],[3,"Formatter"]]};
initSearch(searchIndex);
